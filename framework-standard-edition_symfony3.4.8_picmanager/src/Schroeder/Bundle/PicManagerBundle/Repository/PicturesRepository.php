<?php

namespace Schroeder\Bundle\PicManagerBundle\Repository;
use Doctrine\ORM\EntityRepository;
use Schroeder\Bundle\PicManagerBundle\Entity\Filesystemparameters;

/**
 * SchroederPicManagerBundleRepository  
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */

#class SchroederPicManagerBundle
#{#
##
#
#}
class PicturesRepository extends EntityRepository
{


    public function findOnePicture()
    {
        $query = $this->getEntityManager()-> createQuery(
            "SELECT p.picturename, p.picturepath 
        FROM SchroederPicManagerBundle:Pictures p WHERE p.picturename = '_DSC4511.JPG' ");
        try {
            return $query->getSingleResult();
        }
        catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    public function findThisPicture( $picture1 )
    {
        $query = $this->getEntityManager()-> createQuery(
            "SELECT p.picturename, p.picturepath 
        FROM SchroederPicManagerBundle:Pictures p WHERE p.picturename = :name "
        );
        $query->setParameter('name', $picture1);

        try {
            $qr = $query->getSingleResult();
            #echo "query.getSingleResult is ";
            # getSingleResult is array(2)
            # { ["picturename"]=> string(12) "_DSC4511.JPG"
            #   ["picturepath"]=> string(52) "/home/mschroeder/tmp/BILDER_SAMPLES/NIKON_D3S/PUBLIC" }

            #var_dump ($qr);

            return $query->getSingleResult();
        }
        catch (\Doctrine\ORM\NoResultException $e) {
            echo "exceptionnnn";
            return null;
        }
    }
    public function getImageData( $picture1)
    {
          $query = $this->getEntityManager()-> createQuery(
              "SELECT f.picturethumbnailpreview
               FROM SchroederPicManagerBundle:Pictures p
               JOIN SchroederPicManagerBundle:Filesystemparameters f WITH ( p.pictureid = f.pictureid ) AND ( p.picturename = :name) "
        );
        $query->setParameter('name', $picture1);
        try {
            $qr = $query->getSingleResult();
            #echo "query.getSingleResult is ";
            # getSingleResult is array(2)
            # { ["picturename"]=> string(12) "_DSC4511.JPG"
            #   ["picturepath"]=> string(52) "/home/mschroeder/tmp/BILDER_SAMPLES/NIKON_D3S/PUBLIC" }

            #var_dump ($qr);

            return $query->getSingleResult();
        }
        catch (\Doctrine\ORM\NoResultException $e) {
            echo "exceptionnnn";
            return null;
        }
    }


    public function findSomePictures()
    {
        $query = $this->getEntityManager()-> createQuery(
            "SELECT p.picturename
        FROM SchroederPicManagerBundle:Pictures p WHERE ( p.picturename = '_DSC4511.JPG' ) OR  ( p.picturename = '_DSC8028.jpg' )"
        );

        try {
            return $query->getResult();
        }
        catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    public function findSeveralPictures()
    {
        $query = $this->getEntityManager()-> createQuery(
            "SELECT p.picturename, p.picturepath 
        FROM SchroederPicManagerBundle:Pictures p WHERE ( p.picturename = '_DSC4511.JPG' ) OR  ( p.picturename = '_DSC8028.jpg' )"
        );

        try {
            return $query->getResult();
        }
        catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    public function findAllPictures()
    {
        $query = $this->getEntityManager()-> createQuery(
            "SELECT p.picturename, p.picturepath 
        FROM SchroederPicManagerBundle:Pictures p"
        );

        try {
            return $query->getResult();
        }
        catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    public function findAllPicturesJoinedToDescriptions()
    {
       $query = $this->getEntityManager()-> createQuery(
       'SELECT p.picturename, p.picturepath, d.description     
        FROM SchroederPicManagerBundle:Pictures p 
        JOIN  SchroederPicManagerBundle:PicturesDescriptions pd  WITH p.pictureid = pd.pictureid
        JOIN SchroederPicManagerBundle:Descriptions d WITH pd.descriptionid = d.descriptionid'
    );

    try {
        return $query->getResult();
        }
    catch (\Doctrine\ORM\NoResultException $e) {
        return null;
        }
    }
    public function findAllPicturesJoinedToDescriptionsJoinedToSomeFilesystemParametersJoinedToSomeMetadata_IsOk()
    {
        $query = $this->getEntityManager()-> createQuery(
            'SELECT p.picturename, p.picturepath, d.description, 
                    f.filesize, f.md5sum,
                    md.exifImageModel, md.exifPhotoFocallength, md.exifPhotoDatetimeoriginal, 
                    md.exifPhotoFnumber, md.exifPhotoExposuretime
        FROM SchroederPicManagerBundle:Pictures p 
        JOIN SchroederPicManagerBundle:PicturesDescriptions pd  WITH p.pictureid = pd.pictureid
        JOIN SchroederPicManagerBundle:Descriptions d WITH pd.descriptionid = d.descriptionid
        JOIN SchroederPicManagerBundle:Filesystemparameters f  WITH p.pictureid = f.pictureid
        JOIN SchroederPicManagerBundle:Metadata md  WITH p.pictureid = md.pictureid'
        );

        try {
            return $query->getResult();
        }
        catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findAllPicturesJoinedToDescriptionsJoinedToSomeFilesystemParametersJoinedToSomeMetadata()
    {
        $query = $this->getEntityManager()-> createQuery(
            'SELECT p.picturename, p.picturepath, d.description, 
                    f.filectime ,f.filesize, f.md5sum,
                    md.exifImageModel, md.exifPhotoFocallength, md.exifPhotoDatetimeoriginal, 
                    md.exifPhotoFnumber, md.exifPhotoExposuretime
        FROM SchroederPicManagerBundle:Pictures p 
        JOIN SchroederPicManagerBundle:PicturesDescriptions pd  WITH p.pictureid = pd.pictureid
        JOIN SchroederPicManagerBundle:Descriptions d WITH pd.descriptionid = d.descriptionid
        JOIN SchroederPicManagerBundle:Filesystemparameters f  WITH p.pictureid = f.pictureid
        JOIN SchroederPicManagerBundle:Metadata md  WITH p.pictureid = md.pictureid'
        );

        try {
            return $query->getResult();
        }
        catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
}

